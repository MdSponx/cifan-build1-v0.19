rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        request.auth.uid != null &&
        exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'super-admin');
    }
    
    // Helper function to check if user is super admin
    function isSuperAdmin() {
      return request.auth != null && 
        request.auth.uid != null &&
        exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'super-admin';
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Profiles collection - users can read/write their own profile, admins can read all, super-admins can update roles
    match /profiles/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isSuperAdmin();
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if isOwner(userId) || isSuperAdmin();
    }
    
    // Submissions collection
    match /submissions/{submissionId} {
      // Users can create submissions
      allow create: if request.auth != null;
      
      // Users can read/update their own submissions, admins can read/update all
      allow read: if request.auth != null && 
        (isAdmin() || 
         (exists(/databases/$(database)/documents/submissions/$(submissionId)) && 
          request.auth.uid == resource.data.userId));
      
      allow update: if request.auth != null && 
        (isAdmin() || 
         (exists(/databases/$(database)/documents/submissions/$(submissionId)) && 
          request.auth.uid == resource.data.userId));
      
      // Admins can delete submissions
      allow delete: if isAdmin();
      
      // ShortFilmComments subcollection - only admins can read/write
      match /ShortFilmComments/{commentId} {
        allow read, write, create, update, delete: if isAdmin();
      }
      
      // Notes subcollection - only admins can read/write
      match /notes/{noteId} {
        allow read, write, create, update, delete: if isAdmin();
      }
    }
    
    // Admin collection - only for admin users
    match /admin/{document=**} {
      allow read, write, create, update, delete: if isAdmin();
    }
    
    // Admins collection - only for admin users  
    match /admins/{adminId} {
      allow read, write, create, update, delete: if isAdmin();
    }
    
    // Role audit log collection - only super-admins can read/write
    match /roleAuditLog/{logId} {
      allow read, write, create, update, delete: if isSuperAdmin();
    }
    
    // Public collections (read-only for all users)
    match /public/{document=**} {
      allow read: if true;
      allow write: if false;
    }
  }
}
